/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import type { BinaryLike } from "node:crypto";
import { PathLike } from "node:fs";
import { Readable, Stream, Writable } from "node:stream";
import { File } from "undici";
export declare const fileNamePattern: RegExp;
export interface RawFile {
    /**
     * The name of the file
     */
    name: string;
    /**
     * An explicit key to use for key of the formdata field for this file.
     */
    key?: string;
    /**
     * The actual data for the file
     */
    data: Blob | BinaryLike | Buffer | DataView | File;
    /**
     * Content-Type of the file
     */
    contentType?: string;
}
/**
 * This parameter could be {@link Blob}, {@link Buffer}, {@link File}, {@link PathLike}, {@link RawFile}, {@link Readable}, {@link String}, {@link URL} or {@link Writable}
 */
export type FileResolvable = Blob | File | PathLike | RawFile | Readable | Writable;
/**
 * A function that converts {@link FileResolvable} to {@link File}
 *
 * @param file - The file as {@link FileResolvable} to resolve
 * @param fileName - The name of the file to upload
 */
export declare function resolveFile(file: FileResolvable, fileName?: string): Promise<File>;
/**
 * A function that converts a like {@link Stream} parameter to {@link File}
 *
 * @param stream - A parameter like {@link Readable} or {@link Writable}
 * @param fileName - A file name, if you wish
 * @param mimeType - A mimeType parameter
 */
export declare function streamToFile(stream: Stream, fileName?: string | null, mimeType?: string): Promise<File>;
/**
 * A function that converts a like {@link Stream} parameter to {@link Blob}
 *
 * @param stream - A parameter like {@link Readable} or {@link Writable}
 * @param mimeType - A mimeType parameter
 */
export declare function streamToBlob(stream: Stream, mimeType?: string): Promise<Blob>;
export default resolveFile;
//# sourceMappingURL=FileResolver.d.ts.map