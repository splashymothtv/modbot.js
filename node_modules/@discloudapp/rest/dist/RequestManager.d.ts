/// <reference types="node" />
import EventEmitter from "node:events";
import { Dispatcher } from "undici";
import type { InternalRequest, RequestOptions, RestEvents, RESTOptions } from "./@types";
export interface RequestManager {
    emit: (<K extends keyof RestEvents>(event: K, ...args: RestEvents[K]) => boolean) & (<S extends string | symbol>(event: Exclude<S, keyof RestEvents>, ...args: any[]) => boolean);
    off: (<K extends keyof RestEvents>(event: K, listener: (...args: RestEvents[K]) => void) => this) & (<S extends string | symbol>(event: Exclude<S, keyof RestEvents>, listener: (...args: any[]) => void) => this);
    on: (<K extends keyof RestEvents>(event: K, listener: (...args: RestEvents[K]) => void) => this) & (<S extends string | symbol>(event: Exclude<S, keyof RestEvents>, listener: (...args: any[]) => void) => this);
    once: (<K extends keyof RestEvents>(event: K, listener: (...args: RestEvents[K]) => void) => this) & (<S extends string | symbol>(event: Exclude<S, keyof RestEvents>, listener: (...args: any[]) => void) => this);
    removeAllListeners: (<K extends keyof RestEvents>(event?: K) => this) & (<S extends string | symbol>(event?: Exclude<S, keyof RestEvents>) => this);
}
export declare class RequestManager extends EventEmitter {
    #private;
    options: RESTOptions;
    /**
     * The {@link https://undici.nodejs.org/#/docs/api/Agent | Agent} for all requests
     * performed by this manager.
     */
    agent?: Dispatcher;
    /**
       * The number of requests remaining in the global bucket
       */
    globalRemaining: number;
    /**
       * The timestamp at which the global bucket resets
       */
    globalReset: number;
    constructor(options: Partial<RESTOptions>);
    /**
     * If the rate limit bucket is currently limited by its limit
     */
    get globalLimited(): boolean;
    /**
     * The time until queued requests can continue
     */
    get globalTimeToReset(): number;
    get token(): string;
    /**
     * Sets the authorization token that should be used for requests
     *
     * @param token - The authorization token to use
     */
    setToken(token: string): this;
    resolveRequest(request: InternalRequest): {
        url: string;
        fetchOptions: {
            dispatcher?: Dispatcher | undefined;
        } & Omit<Dispatcher.RequestOptions, "origin" | "path" | "method"> & Partial<Pick<Dispatcher.RequestOptions, "method">>;
    };
    request(url: string, options: RequestOptions): Promise<Dispatcher.ResponseData>;
}
//# sourceMappingURL=RequestManager.d.ts.map