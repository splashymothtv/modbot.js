/// <reference types="node" />
import EventEmitter from "node:events";
import type { InternalRequest, RequestData, RestEvents, RESTOptions, RouteLike } from "./@types";
import { RequestManager } from "./RequestManager";
export interface REST {
    emit: (<K extends keyof RestEvents>(event: K, ...args: RestEvents[K]) => boolean) & (<S extends string | symbol>(event: Exclude<S, keyof RestEvents>, ...args: any[]) => boolean);
    off: (<K extends keyof RestEvents>(event: K, listener: (...args: RestEvents[K]) => void) => this) & (<S extends string | symbol>(event: Exclude<S, keyof RestEvents>, listener: (...args: any[]) => void) => this);
    on: (<K extends keyof RestEvents>(event: K, listener: (...args: RestEvents[K]) => void) => this) & (<S extends string | symbol>(event: Exclude<S, keyof RestEvents>, listener: (...args: any[]) => void) => this);
    once: (<K extends keyof RestEvents>(event: K, listener: (...args: RestEvents[K]) => void) => this) & (<S extends string | symbol>(event: Exclude<S, keyof RestEvents>, listener: (...args: any[]) => void) => this);
    removeAllListeners: (<K extends keyof RestEvents>(event?: K) => this) & (<S extends string | symbol>(event?: Exclude<S, keyof RestEvents>) => this);
}
export declare class REST extends EventEmitter {
    readonly requestManager: RequestManager;
    constructor(options?: Partial<RESTOptions>);
    get token(): string;
    /**
     * Sets the authorization token that should be used for requests
     *
     * @param token - The authorization token to use
     */
    setToken(token: string): this;
    /**
     * Runs a get request from the api
     *
     * @param fullRoute - The full route to query
     * @param options - Optional request options
     */
    get<T = any>(fullRoute: RouteLike, options?: RequestData): Promise<T>;
    /**
     * Runs a delete request from the api
     *
     * @param fullRoute - The full route to query
     * @param options - Optional request options
     */
    delete<T = any>(fullRoute: RouteLike, options?: RequestData): Promise<T>;
    /**
     * Runs a post request from the api
     *
     * @param fullRoute - The full route to query
     * @param options - Optional request options
     */
    post<T = any>(fullRoute: RouteLike, options?: RequestData): Promise<T>;
    /**
     * Runs a put request from the api
     *
     * @param fullRoute - The full route to query
     * @param options - Optional request options
     */
    put<T = any>(fullRoute: RouteLike, options?: RequestData): Promise<T>;
    /**
     * Runs a request from the api
     *
     * @param options - Request options
     */
    request(options: InternalRequest): Promise<any>;
    /**
     * Runs a request from the API, yielding the raw Response object
     *
     * @param options - Request options
     */
    raw(options: InternalRequest): Promise<import("undici/types/dispatcher").default.ResponseData>;
}
//# sourceMappingURL=REST.d.ts.map