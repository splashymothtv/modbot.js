"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const DataManager_1 = __importDefault(require("./DataManager"));
/**
 * Manager of cache
 */
class CachedManager extends DataManager_1.default {
    #cache = new Map();
    constructor(discloudApp, holds) {
        super(discloudApp, holds);
    }
    get cache() {
        return this.#cache;
    }
    _add(data) {
        const existing = this.cache.get(data.id);
        if (existing) {
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            existing._patch(data);
            return existing;
        }
        const entry = this.holds ? new this.holds(this.discloudApp, data) : data;
        this.cache.set(entry.id, entry);
        return entry;
    }
    _addMany(data) {
        const cache = new Map();
        for (const element of data) {
            const obj = this._add(element);
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-ignore
            cache.set(obj.id, obj);
        }
        return cache;
    }
    _remove(id) {
        return this.cache.delete(id);
    }
    _removeMany(ids) {
        for (const id of ids)
            this._remove(id);
        return true;
    }
}
exports.default = CachedManager;
