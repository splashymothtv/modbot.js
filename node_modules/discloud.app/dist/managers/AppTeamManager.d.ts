import { ApiAppTeamManager, RESTDeleteApiAppTeamResult } from "@discloudapp/api-types/v2";
import { ModPermissionsResolvable } from "@discloudapp/util";
import DiscloudApp from "../discloudApp/DiscloudApp";
import BaseManager from "./BaseManager";
/**
 * Manager for Team on your application on Discloud
 */
export default class AppTeamManager extends BaseManager {
    constructor(discloudApp: DiscloudApp);
    /**
     * Add a mod for you application on Discloud
     *
     * @param appID - The app id
     * @param modID - The mod id
     * @param perms - The permissions for the mod. See {@link ModPermissionsResolvable}
     * @returns Promise {@link ApiAppTeamManager}
     */
    create(appID: string, modID: string, perms: ModPermissionsResolvable): Promise<ApiAppTeamManager>;
    /**
     * Edit permissions of a mod for you application on Discloud
     *
     * @param appID - The app id
     * @param modID - The mod id
     * @param perms - The permissions for the mod. See {@link ModPermissionsResolvable}
     * @returns Promise {@link ApiAppTeamManager}
     */
    edit(appID: string, modID: string, perms: ModPermissionsResolvable): Promise<ApiAppTeamManager>;
    /**
     * Remove a mod from you application on Discloud
     *
     * @param appID - The app id
     * @param modID - The mod id
     * @returns Promise {@link RESTDeleteApiAppTeamResult}
     */
    delete(appID: string, modID: string): Promise<RESTDeleteApiAppTeamResult>;
    /**
     * Get mods information for your app on Discloud
     *
     * @returns Promise {@link RESTGetApiAppTeamResult}
     */
    fetch(appID: string): Promise<import("@discloudapp/api-types/v2").ApiAppTeam[]>;
}
//# sourceMappingURL=AppTeamManager.d.ts.map