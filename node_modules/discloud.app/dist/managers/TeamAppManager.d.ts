import { ApiAppManagerRestartedAll, ApiAppManagerStartedAll, ApiAppManagerStopedAll, ApiTerminal, RESTPutApiAppCommitResult, RESTPutApiAppRamResult, RESTPutApiAppRestartResult, RESTPutApiAppStartResult, RESTPutApiAppStopResult } from "@discloudapp/api-types/v2";
import { UpdateAppOptions } from "../@types";
import DiscloudApp from "../discloudApp/DiscloudApp";
import AppBackup from "../structures/AppBackup";
import TeamApp from "../structures/TeamApp";
import TeamAppStatus from "../structures/TeamAppStatus";
import CachedManager from "./CachedManager";
/**
 * Manager for your team on Discloud
 */
export default class TeamAppManager extends CachedManager<TeamApp> {
    constructor(discloudApp: DiscloudApp);
    /**
     * Get the status for the app of your team on Discloud
     *
     * @param appID - Your team app id
     */
    status(appID: string): Promise<TeamAppStatus>;
    status(appID?: "all"): Promise<Map<string, TeamAppStatus>>;
    /**
     * Get logs for the app of your team on Discloud
     *
     * @param appID - Your team app id
     */
    terminal(appID: string): Promise<ApiTerminal>;
    terminal(appID?: "all"): Promise<Map<string, ApiTerminal>>;
    /**
     * Get backups for the app of your team on Discloud
     *
     * @param appID - Your team app id
     */
    backup(appID: string): Promise<AppBackup>;
    backup(appID?: "all"): Promise<Map<string, AppBackup>>;
    /**
     * Set the quantity of ram to application of your team
     *
     * @param appID - Your team app id
     * @param quantity - Minimum values is `100` to `bot` or `512` for `site`
     * @returns Promise {@link RESTPutApiAppRamResult}
     */
    ram(appID: string, quantity: number): Promise<RESTPutApiAppRamResult>;
    /**
     * Update an of your team apps on Discloud
     *
     * @param appID - Your team app id
     * @param options - Options to update your app.
     * @returns Promise {@link RESTPutApiAppCommitResult}
     */
    update(appID: string, options: UpdateAppOptions): Promise<RESTPutApiAppCommitResult>;
    /**
     * Restart your team application on Discloud
     *
     * @param appID - Your team app id
     */
    restart(appID: string): Promise<RESTPutApiAppRestartResult>;
    restart(appID?: "all"): Promise<ApiAppManagerRestartedAll>;
    /**
     * Start your team application on Discloud
     *
     * @param appID - Your team app id
     */
    start(appID: string): Promise<RESTPutApiAppStartResult>;
    start(appID?: "all"): Promise<ApiAppManagerStartedAll>;
    /**
     * Stop your team application on Discloud
     *
     * @param appID - Your team app id
     */
    stop(appID: string): Promise<RESTPutApiAppStopResult>;
    stop(appID?: "all"): Promise<ApiAppManagerStopedAll>;
    /**
     * Get information of your team application on Discloud.
     *
     * @param appID - You app id.
     */
    fetch(): Promise<Map<string, TeamApp>>;
}
//# sourceMappingURL=TeamAppManager.d.ts.map