import { BaseApiApp } from "@discloudapp/api-types/v2";
import { UpdateAppOptions } from "../@types";
import DiscloudApp from "../discloudApp/DiscloudApp";
import Base from "./Base";
/**
 * Base for app structures
 */
export default abstract class BaseApp extends Base {
    /**
     * Your app id
     */
    id: string;
    constructor(discloudApp: DiscloudApp, data: BaseApiApp);
    protected _patch(data: BaseApiApp): this;
    /**
     * Set the quantity of ram to your application
     *
     * @param quantity - Minimum values is `100` to `bot` or `512` for `site`
     * @returns Promise {@link RESTPutApiAppRamResult}
     */
    setRam(quantity: number): Promise<import("@discloudapp/api-types/v2").RESTPutApiAppRamResult>;
    /**
     * Get backups of your application on Discloud
     */
    backup(): Promise<import("./AppBackup").default>;
    /**
     * Get logs of your application on Discloud
     */
    terminal(): Promise<import("@discloudapp/api-types/v2").ApiTerminal>;
    /**
     * Delete your application from Discloud.
     */
    delete(): Promise<import("@discloudapp/api-types/v2").RESTApiBaseResult>;
    /**
     * Restart your application on Discloud
     */
    restart(): Promise<import("@discloudapp/api-types/v2").RESTApiBaseResult>;
    /**
     * Start your application on Discloud
     */
    start(): Promise<import("@discloudapp/api-types/v2").RESTApiBaseResult>;
    /**
     * Stop your application on Discloud
     *
     * @param appID - You app id
     */
    stop(): Promise<import("@discloudapp/api-types/v2").RESTApiBaseResult>;
    /**
     * Update an of your apps on Discloud.
     *
     * @param options - Options to update your app.
     * @returns Promise {@link RESTPutApiAppCommitResult}
     */
    update(options: UpdateAppOptions): Promise<import("@discloudapp/api-types/v2").RESTPutApiAppCommitResult>;
    /**
     * @returns app id
     */
    toString(): string;
}
//# sourceMappingURL=BaseApp.d.ts.map