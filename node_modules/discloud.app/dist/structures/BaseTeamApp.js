"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Base_1 = __importDefault(require("./Base"));
/**
 * Base for app structures
 */
class BaseTeamApp extends Base_1.default {
    constructor(discloudApp, data) {
        super(discloudApp);
        this._patch(data);
    }
    _patch(data) {
        if ("id" in data)
            this.id = data.id;
        return super._patch(data);
    }
    /**
     * Get backups for the app of your team on Discloud
     */
    backup() {
        return this.discloudApp.teamApps.backup(this.id);
    }
    /**
     * Set the quantity of ram to application of your team
     *
     * @param quantity - Minimum values is `100` to `bot` or `512` for `site`
     * @returns Promise {@link RESTPutApiAppRamResult}
     */
    setRam(quantity) {
        return this.discloudApp.teamApps.ram(this.id, quantity);
    }
    /**
     * Get logs for the app of your team on Discloud
     */
    terminal() {
        return this.discloudApp.teamApps.terminal(this.id);
    }
    /**
     * Update an of your team apps on Discloud
     *
     * @param options - Options to update your app.
     * @returns Promise {@link RESTPutApiAppCommitResult}
     */
    update(options) {
        return this.discloudApp.teamApps.update(this.id, options);
    }
    /**
     * Restart your team application on Discloud
     */
    async restart() {
        return this.discloudApp.teamApps.restart(this.id);
    }
    /**
     * Start your team application on Discloud
     */
    async start() {
        return this.discloudApp.teamApps.start(this.id);
    }
    /**
     * Stop your team application on Discloud
     */
    async stop() {
        return this.discloudApp.teamApps.stop(this.id);
    }
    /**
     * @returns app id
     */
    toString() {
        return this.id;
    }
}
exports.default = BaseTeamApp;
